using System;

public class Solution {
    public int solution(string[] board) {
        int answer = 1;

        int nOCnt = 0;
        int nXCnt = 0;

        bool bOFin = false;
        bool bXFin = false;

        for (int i = 0; i < board.Length; i++)
        {
            for (int j = 0; j < board[i].Length; j++)
            {
                bool bSuc = success(board, i, j);
                if (board[i][j] == 'O') 
                {
                    
                    bOFin |= bSuc;
                    nOCnt++; // 'O' Counting
                }

                if (board[i][j] == 'X') 
                {
                    bXFin |= bSuc; // 'X' 성공
                    nXCnt++; // 'X' Counting
                }
            }
        }

        if (nOCnt < nXCnt) // X가 O보다 많으면 불가
        {
            answer = 0;
        }

        if (nOCnt > nXCnt + 1) // O가 X + 1보다 큰 경우 불가
        {
            answer = 0;
        }

        if (bOFin && bXFin) // 둘다 성공인 경우 불가
        {
            answer = 0;
        }

        if (bOFin && (!bXFin)) // 'O'가 성공인데
        {
            if (nOCnt <= nXCnt) // X 개수가 같거나 크면
            {
                answer = 0;
            }
        }

        if ((!bOFin) && bXFin) // 'X'가 성공인데
        {
            if (nOCnt > nXCnt) // O가 크면
            {
                answer = 0;
            }
        }

        return answer;
    }

    private bool success(string[] board, int nX, int nY)
    {
        bool bRet = false;

        // if (nX == 1 && nY == 1) : 가로, 세로, 대각(2번)
        // else if (nX == 1 || nY == 1) : 가로, 세로
        // else : 가로, 세로, 대각(1번)
        // 가로 : nY가 바뀌고 기준nY와 다른 index의 값을 비교
        // 세로 : nX가 바뀌고 기준nX와 다른 index의 값을 비교
        // 대각(1번) : nX or nY가 0이면 ++ 진행, nX or nY가 2면 -- 진행
        // 대각(2번) : --, ++과 +-, -+을 계산

        switch (nX)
        {
            case 0:
                switch (nY)
                {
                    case 0:
                        if ((board[0][0] == board[0][1] && board[0][0] == board[0][2]) || // 가로
                            (board[0][0] == board[1][0] && board[0][0] == board[2][0]) || // 세로
                            (board[0][0] == board[1][1] && board[0][0] == board[2][2]))   // 대각
                        {
                            bRet = true;
                        }
                        break;
                    case 1:
                        if ((board[0][1] == board[0][0] && board[0][1] == board[0][2]) || // 가로
                            (board[0][1] == board[1][1] && board[0][1] == board[2][1]))   // 세로
                        {
                            bRet = true;
                        }
                        break;
                    case 2:
                        if ((board[0][2] == board[0][0] && board[0][2] == board[0][1]) || // 가로
                            (board[0][2] == board[1][2] && board[0][2] == board[2][2]) || // 세로
                            (board[0][2] == board[1][1] && board[0][2] == board[2][0]))   // 대각
                        {
                            bRet = true;
                        }
                        break;
                }
                break;

            case 1:
                switch (nY)
                {
                    case 0:
                        if ((board[1][0] == board[1][1] && board[1][0] == board[1][2]) || // 가로
                            (board[1][0] == board[0][0] && board[1][0] == board[2][0]))   // 세로
                        {
                            bRet = true;
                        }
                        break;
                    case 1:
                        if ((board[1][1] == board[1][0] && board[1][1] == board[1][2]) || // 가로
                            (board[1][1] == board[0][1] && board[1][1] == board[2][1]) || // 세로
                            (board[1][1] == board[0][0] && board[1][1] == board[2][2]) || // 대각(좌상, 우하)
                            (board[1][1] == board[0][2] && board[1][1] == board[2][0]))   // 대각(우상, 좌하)
                        {
                            bRet = true;
                        }
                        break;
                    case 2:
                        if ((board[1][2] == board[1][1] && board[1][2] == board[1][0]) || // 가로
                            (board[1][2] == board[0][2] && board[1][2] == board[2][2]))   // 세로
                        {
                            bRet = true;
                        }
                        break;
                }
                break;

            case 2:
                switch (nY)
                {
                    case 0:
                        if ((board[2][0] == board[2][1] && board[2][0] == board[2][2]) || // 가로
                            (board[2][0] == board[1][0] && board[2][0] == board[0][0]) || // 세로
                            (board[2][0] == board[1][1] && board[2][0] == board[0][2]))   // 대각
                        {
                            bRet = true;
                        }
                        break;
                    case 1:
                        if ((board[2][1] == board[2][0] && board[2][1] == board[2][2]) || // 가로
                            (board[2][1] == board[1][1] && board[2][1] == board[0][1]))   // 세로
                        {
                            bRet = true;
                        }
                        break;
                    case 2:
                        if ((board[2][2] == board[2][1] && board[2][2] == board[2][0]) || // 가로
                            (board[2][2] == board[1][2] && board[2][2] == board[0][2]) || // 세로
                            (board[2][2] == board[1][1] && board[2][2] == board[0][0]))   // 대각
                        {
                            bRet = true;
                        }
                        break;
                }
                break;
        }

        return bRet;
    }
}
